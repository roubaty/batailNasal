/*
 * DisplayViewPanel.java
 *
 * Created on January 22, 2007, 2:36 PM
 */

package view;

import controller.DefaultController;
import java.beans.PropertyChangeEvent;


/**
 * This is a custom view panel that displays a "document" consisting of a single
 * text element. Both the document and the text element respond to changes in
 * the model state.
 *
 * @author Robert Eckstein
 */

public class DisplayViewPanel extends AbstractViewPanel
{
    //  The controller used by this view
    private DefaultController controller;
    
    //  A private inner class that performs the painting of the text
    //  component
    
    
    
    /**
     * Creates new form TextElementDisplayPanel
     * @param controller An object implenting the controller interface that
     *        this view can use to process GUI actions
     */
    public DisplayViewPanel(DefaultController controller) {
        
        this.controller = controller;
        
        initComponents();
        localInitialization();
    }

    /**
     * Initialization method called from the constructor
     */
    public void localInitialization() {
        
    }
    
    // </editor-fold>
     
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    		
    }
    
    /**
     * Called by the controller when it needs to pass along a property change
     * from a model.
     * @param evt The property change event
     */
    public void modelPropertyChange(PropertyChangeEvent evt) {
        
    }    
}
